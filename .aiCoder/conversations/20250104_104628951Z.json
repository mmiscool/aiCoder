{
  "messages": [
    {
      "role": "system",
      "content": "./.aiCoder/prompts/default-system-prompt.md",
      "filePath": "./.aiCoder/prompts/default-system-prompt.md",
      "description": "",
      "hidden": true
    },
    {
      "role": "user",
      "content": "./.aiCoder/prompts/default-plan-prompt.md",
      "filePath": "./.aiCoder/prompts/default-plan-prompt.md",
      "description": "",
      "hidden": true
    },
    {
      "role": "user",
      "content": "./src/classListing.js",
      "filePath": "./src/classListing.js",
      "description": "// Code file to be edited",
      "hidden": true
    },
    {
      "role": "system",
      "content": "./.aiCoder/prompts/snippet-production-prompt.md",
      "filePath": "./.aiCoder/prompts/snippet-production-prompt.md",
      "description": "",
      "hidden": true
    },
    {
      "role": "user",
      "content": "Tell me what is going on in this code file. What is it used for? ",
      "hidden": false
    },
    {
      "role": "assistant",
      "content": "This JavaScript code file exports several asynchronous and synchronous functions to manipulate and extract information from ES6+ JavaScript code, specifically focusing on class definitions and method signatures. Here's a breakdown of the main functionalities:\n\n1. `prependClassStructure(targetFile, onlyStubs)`: This function reads the content of a specified target file (using `readFile`), extracts class methods using the `getMethodsWithArguments` helper function, and prepares new class definitions with or without method names based on the `includeFunctions` flag. The updated list of classes is then prepended to the original file content and written back using `writeFile`.\n\n2. `getMethodsWithArguments(code, onlyStubs)`: This function takes JavaScript code as input (using ESprima for parsing), analyzes class declarations within it, extracts method names along with their arguments, and optionally filters out methods marked as stubs if the `onlyStubs` flag is set to true. The result is returned as an object where each key corresponds to a class name, and its value is an array of objects representing method information (name, arguments).\n\n3. `getStubMethods(code)`: This function calls `getMethodsWithArguments` with `onlyStubs = true`, filters the resulting object to return only classes containing stub methods, and returns these as a nested object with class names as keys and an array of stub method objects as values.\n\n4. `getListOfFunctions(code)`: Similar to `getMethodsWithArguments`, this function extracts information from JavaScript code focusing on function declarations (including exported named declarations). The result is returned as an object where each key corresponds to a function name, and its value is an object containing the arguments, a flag indicating whether it's a stub method, and line number.\n\nThis code file provides utilities for extracting and manipulating class/method information in JavaScript code snippets, potentially useful for automated code generation or refactoring tasks, such as adding method signatures to existing classes or identifying and managing stub methods within a codebase.",
      "hidden": false
    }
  ],
  "title": "To use this file effectively:\n- Import the functions (e.g., `import { prependClassStructure } from './path_to_file'`) in another JavaScript script.\n- Provide the path to the target file for modifying (prependClassStructure) or include the JavaScript code snippet directly when calling getMethodsWithArguments, getStubMethods, and getListOfFunctions.\n- Adjust flags and parameters according to your specific requirements, such as including functions/methods, filtering stubs, etc.",
  "id": "20250104_104628951Z",
  "targetFile": "./src/classListing.js",
  "chatMode": "chat",
  "conversationNew": false,
  "lastModified": "2025-01-04T10:47:02.738Z"
}