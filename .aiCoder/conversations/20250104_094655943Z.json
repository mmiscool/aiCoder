{
  "messages": [
    {
      "role": "system",
      "content": "./.aiCoder/prompts/default-system-prompt.md",
      "filePath": "./.aiCoder/prompts/default-system-prompt.md",
      "description": "",
      "hidden": true
    },
    {
      "role": "user",
      "content": "./.aiCoder/prompts/default-plan-prompt.md",
      "filePath": "./.aiCoder/prompts/default-plan-prompt.md",
      "description": "",
      "hidden": true
    },
    {
      "role": "user",
      "content": "./src/classListing.js",
      "filePath": "./src/classListing.js",
      "description": "// Code file to be edited",
      "hidden": true
    },
    {
      "role": "system",
      "content": "./.aiCoder/prompts/snippet-production-prompt.md",
      "filePath": "./.aiCoder/prompts/snippet-production-prompt.md",
      "description": "",
      "hidden": true
    },
    {
      "role": "user",
      "content": "What is this code file doing? ",
      "hidden": false
    },
    {
      "role": "assistant",
      "content": "This JavaScript code file provides functionality for working with JavaScript code structured as an abstract syntax tree (AST). It includes the following main features:\n\n1. `prependClassStructure`: This function reads the content of a target file, extracts method information using the `getMethodsWithArguments` helper, and then generates a new string containing class declarations, optionally including method names with their argument lists. The generated classes are prepended to the original file's content and written back to it.\n\n2. `getMethodsWithArguments`: This function parses JavaScript code using Esprima to generate an AST. It then iterates through all class declarations (and exported named declarations) in the provided code, extracting method names, their argument lists, and whether they are stub methods (containing only a return statement without an actual implementation).\n\n3. `getStubMethods`: This function utilizes `getMethodsWithArguments` with `onlyStubs` set to true, filtering out non-stub methods. It returns an object containing classes that have at least one stub method, including the stub methods themselves.\n\n4. `getListOfFunctions`: This function generates an object mapping function names to their argument lists and a flag indicating whether they are stub functions (i.e., containing no code other than a return statement).\n\nIn summary, this file provides utilities for inspecting JavaScript code and generating new code based on extracted information such as method names with arguments, class hierarchies, and stub methods.",
      "hidden": false
    }
  ],
  "title": "```javascript\nconst esprima = require('esprima');\nconst estraverse = require('estraverse');\n\nclass CodeAnalyzer {\n  constructor(code) {\n    this.code = code;\n    this.ast = esprima.parseScript(this.code);\n  }\n\n  getMethodsWithArguments(options) {\n    const methodsWithArgs = {};\n\n    estraverse.traverse(this.ast, {\n      enter: node => {\n        if (node.type === 'ClassExpression' || (node.type === 'VariableDeclarator' && node.id.name)) {\n          node.body.properties.forEach(property => {\n            if (property.type === 'MethodDefinition') {\n              const method = property;\n              methodsWithArgs[method.key.name] = this.getArguments(method);\n            }\n          });\n        }\n      },\n    }, this.ast);\n\n    return options && options.onlyStubs ? methodsWithArgs : { ...methodsWithArgs, stubs: {} };\n  }\n\n  getStubMethods() {\n    const { onlyStubs, ...methodsWithArgs } = this.getMethodsWithArguments({ onlyStubs: true });\n    return { [onlyStubs ? 'classes' : 'stubs']: methodsWithArgs };\n  }\n\n  getListOfFunctions(options) {\n    const { classes, stubs } = this.getMethodsWithArguments();\n\n    return {\n      functions: Object.keys(classes).reduce((acc, className) => ({\n        ...acc,\n        [className]: classToFuncList(classes[className], options),\n      }), {}),\n      stubFunctions: Object.keys(stubs).reduce((acc, methodName) => ({\n        ...acc,\n        [methodName]: stubToFuncList(stubs[methodName]),\n      }), {}),\n    };\n\n    function classToFuncList(methods, { includeArguments = true } = {}) {\n      return methods.reduce((acc, method, index) => {\n        acc[method] = includeArguments ? this.getArguments(methods[index]) : null;\n        return acc;\n      }, {});\n    }\n\n    function stubToFuncList(stub) {\n      return { ...stub, code: 'return;' };\n    }\n  }\n\n  prependClassStructure(options = {}) {\n    const { code: originalCode, onlyStubs = false, includeArguments = true } = options;\n    const { classes, stubs } = this.getMethodsWithArguments({ onlyStubs, includeArguments });\n\n    let resultCode = originalCode;\n\n    Object.keys(classes).forEach(className => {\n      if (includeArguments) {\n        resultCode += `\nclass ${className} {\\n${this.getArguments(classes[className])}\\n}`;\n      } else {\n        resultCode += `\nclass ${className}{}`;\n      }\n    });\n\n    Object.keys(stubs).forEach(methodName => {\n      if (includeArguments) {\n        resultCode += `\nclass ${methodName}Stub {\\n${this.getArguments(stubs[methodName])}\\n}`;\n      } else {\n        resultCode += `\nclass ${methodName}Stub{}`;\n      }\n    });\n\n    return resultCode;\n  }\n}\n\nmodule.exports = CodeAnalyzer;\n```",
  "id": "20250104_094655943Z",
  "targetFile": "./src/classListing.js",
  "chatMode": "chat",
  "conversationNew": false,
  "lastModified": "2025-01-04T10:46:16.429Z"
}